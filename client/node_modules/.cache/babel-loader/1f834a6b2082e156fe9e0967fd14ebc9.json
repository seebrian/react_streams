{"ast":null,"code":"import streams from '../apis/streams';\nimport createBrowserHistory from '../history';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from './types';\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n}; //asynchronous action creator we making use of redux thunk\n\nexport const createStream = formValues => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  const response = await streams.post('/streams', { ...formValues,\n    userId\n  });\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  }); //Do some programmatic navigation to\n  // get the user back to the root route\n\n  history.pushState('/');\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get('/streams');\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`); //es2015\n\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.put(`/streams/${id}`, formValues); //es2015\n\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`); //\n\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n};","map":{"version":3,"sources":["/Users/brian/Documents/udemy/streams/client/src/actions/index.js"],"names":["streams","createBrowserHistory","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","response","post","data","history","pushState","fetchStreams","get","fetchStream","id","editStream","put","deleteStream","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,aAA5B,EAA2CC,aAA3C,EAA0DC,YAA1D,EAAwEC,aAAxE,EAAuFC,WAAvF,QAA0G,SAA1G;AACA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAET,OADH;AAEHU,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AACzB,SAAO;AACHF,IAAAA,IAAI,EAAER;AADH,GAAP;AAGH,CAJM,C,CAKP;;AACA,OAAO,MAAMW,YAAY,GAAIC,UAAD,IAAgB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACtE,QAAM;AAAEP,IAAAA;AAAF,MAAaO,QAAQ,GAAGC,IAA9B;AACA,QAAMC,QAAQ,GAAG,MAAMnB,OAAO,CAACoB,IAAR,CAAa,UAAb,EAAyB,EAAE,GAAGL,UAAL;AAAiBL,IAAAA;AAAjB,GAAzB,CAAvB;AACAM,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEP,aAAR;AAAuBQ,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR,CAHsE,CAItE;AACA;;AACAC,EAAAA,OAAO,CAACC,SAAR,CAAkB,GAAlB;AACH,CAPM;AASP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMR,QAAN,IAAkB;AAChD,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACyB,GAAR,CAAY,UAAZ,CAAvB;AACAT,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEN,aAAR;AAAuBO,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACH,CAHM;AAKP,OAAO,MAAMK,WAAW,GAAIC,EAAD,IAAQ,MAAMX,QAAN,IAAkB;AACjD,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAACyB,GAAR,CAAa,YAAWE,EAAG,EAA3B,CAAvB,CADiD,CACI;;AACrDX,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEL,YAAR;AAAsBM,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACH,CAHM;AAKP,OAAO,MAAMO,UAAU,GAAG,CAACD,EAAD,EAAKZ,UAAL,KAAoB,MAAMC,QAAN,IAAkB;AAC5D,QAAMG,QAAQ,GAAG,MAAMnB,OAAO,CAAC6B,GAAR,CAAa,YAAWF,EAAG,EAA3B,EAA8BZ,UAA9B,CAAvB,CAD4D,CACK;;AACjEC,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEH,WAAR;AAAqBI,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAvC,GAAD,CAAR;AACH,CAHM;AAKP,OAAO,MAAMS,YAAY,GAAIH,EAAD,IAAQ,MAAMX,QAAN,IAAkB;AAClD,QAAMhB,OAAO,CAAC+B,MAAR,CAAgB,YAAWJ,EAAG,EAA9B,CAAN,CADkD,CACX;;AACvCX,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEJ,aAAR;AAAuBK,IAAAA,OAAO,EAAEe;AAAhC,GAAD,CAAR;AACH,CAHM","sourcesContent":["import streams from '../apis/streams';\nimport createBrowserHistory from '../history';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from './types';\nexport const signIn = (userId) => {\n    return {\n        type: SIGN_IN,\n        payload: userId\n    };\n};\n\nexport const signOut = () => {\n    return {\n        type: SIGN_OUT\n    };\n};\n//asynchronous action creator we making use of redux thunk\nexport const createStream = (formValues) => async (dispatch, getState) => {\n    const { userId } = getState().auth;\n    const response = await streams.post('/streams', { ...formValues, userId });\n    dispatch({ type: CREATE_STREAM, payload: response.data });\n    //Do some programmatic navigation to\n    // get the user back to the root route\n    history.pushState('/');\n};\n\nexport const fetchStreams = () => async dispatch => {\n    const response = await streams.get('/streams');\n    dispatch({ type: FETCH_STREAMS, payload: response.data });\n};\n\nexport const fetchStream = (id) => async dispatch => {\n    const response = await streams.get(`/streams/${id}`);//es2015\n    dispatch({ type: FETCH_STREAM, payload: response.data });\n};\n\nexport const editStream = (id, formValues) => async dispatch => {\n    const response = await streams.put(`/streams/${id}`, formValues);//es2015\n    dispatch({ type: EDIT_STREAM, payload: response.data });\n};\n\nexport const deleteStream = (id) => async dispatch => {\n    await streams.delete(`/streams/${id}`);//\n    dispatch({ type: DELETE_STREAM, payload: id });\n};"]},"metadata":{},"sourceType":"module"}